<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="en"
      metal:use-macro="context/main_template/macros/master"
      i18n:domain="plone">

<metal:block fill-slot="top_slot"
    tal:define="dummy python:request.set('disable_border', 1);
                disable_column_two python:request.set('disable_plone.rightcolumn', 1);
                disable_column_two python:request.set('disable_plone.leftcolumn', 1);
                portal_state context/@@plone_portal_state;
                portal_url portal_state/portal_url">
  <link rel="stylesheet" type="text/css" href="" media="screen" tal:attributes="href string:${portal_url}/++resource++pac_migrator.css">
</metal:block>

<body>

<metal:custom_title fill-slot="content-title">
  <h1 class="documentFirstHeading" i18n:translate="">Custom types migration control panel</h1>
</metal:custom_title>
<metal:custom_desc fill-slot="content-description">
  <div class="documentDescription" i18n:translate="">Migrate custom Archetypes content types to any available Dexterity content types.</div>
</metal:custom_desc>

<metal:content-core fill-slot="content-core">
<metal:block define-macro="content-core" tal:define="at_types view/getATFTIs">
  <div class="important">
    <h2 i18n:translate="">Important</h2>
    <p i18n:translate="">Before migrating your content please read the <a href="https://github.com/plone/plone.app.contenttypes#migration">migration-section in the documentation of plone.app.contenttypes</a></p>


    <h3>Migrating content that is translated with LinguaPlone</h3>
    <p i18n:translate="">Since LinguaPlone does not support Dexterity you need to migrate from LinguaPlone to <a href="http://pypi.python.org/pypi/plone.app.multilingual">plone.app.multilingual</a>. The migration from Products.LinguaPlone to plone.app.multilingual should happen before the migration from Archetypes to plone.app.contenttypes. For details on the migration see the <a href="http://pypi.python.org/pypi/plone.app.multilingual#linguaplone-migration">documentation</a></p>
    <h3 i18n:translate="">Note about how long it might take</h3>
    <p i18n:translate="">Depending of the number of archetypes in your portal, it may take a <span class="strong">really</span> long time for the migration to be done.
      Stay calm and be patient.</p>
    </div>
    <script type="text/javascript">
        // function that toggle an icon by calling the p_viewName view
        function getDXFields(at_typename, dx_typename) {
          $.ajax({
            url: '@@display_dx_fields',
            dataType: 'html',
            data: {at_typename:at_typename,
                   dx_typename: dx_typename},
            cache: false,
            success: function(data) {
                var $div = $('#hook_at_fti_' + at_typename);
                $div.empty();
                $div.html(data);
              },
            error: function(jqXHR, textStatus, errorThrown) {
              }
            });
        }
    </script>
    <tal:block condition="at_types">
        <div id="migration-options">
          <h2 i18n:translate="">Migrate contents</h2>
          <div i18n:translate=""
            class="documentDescription">
            <p>You can select which AT content type you want to migrate to an existing DX content type.</p>
            <form id="migrateCustomATForm" method="post"
                  tal:attributes="action python:context.absolute_url() + '/@@custom_migration'">
            <table>
                <tr tal:repeat="at_type at_types">
                    <td valign="top">
                        <p tal:content="at_type/title" style="font-weight: bold;">AT content type title</p>
                        <p tal:repeat="field python: view.getFieldsForATType(at_type['id'])" tal:content="field/title">Field name</p>
                    </td>
                    <td valign="top">
                        <select tal:attributes="onChange string:javascript:getDXFields(at_typename='${at_type/id}', this.value);
                                                name string:dx_select_${at_type/id};">
                            <option value="" selected="selected">Do not migrate</option>
                            <option tal:repeat="dx_type view/getDXFTIs"
                                    tal:attributes="value dx_type/id"
                                    tal:content="dx_type/title">DX type name</option>
                        </select>
                        <!--tal:block repeat='dx_type view/getDXFTIs'>
                            <h3 tal:content="dx_type/title"></h3>
                            <tal:block repeat="field python: view.getFieldsForDXType(dx_type['id'])">
                                <p tal:content="field/id">AT field</p>
                            </tal:block>
                        </tal:block-->
                        <div id="hook_at_fti" tal:attributes="id string:hook_at_fti_${at_type/id}" />
                    </td>
                </tr>
            </table>
            <div>
              <br />
              <input type="submit" name="form.button.Apply" class="context" value="Apply" i18n:attributes="value" i18n:domain="plone"/>&nbsp;
              <input type="submit" name="form.button.Cancel" class="standalone" value="Cancel" i18n:attributes="value" i18n:domain="plone"/>
            </div>
            </form>
          </div>
        </div>
    </tal:block>
  <tal:block condition="not:at_types">
    <div class="important">
      <h2 i18n:translate="">Warning</h2>
      <p i18n:translate="" class="strong">No content to migrate.</p>
  </tal:block>

</metal:block>
</metal:content-core>
</body>
</html>
